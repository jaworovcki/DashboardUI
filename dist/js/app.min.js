/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/js/app.js":
/*!***********************!*\
  !*** ./app/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Site statistic chart section\r\n\r\nconst filePath = './js/data.json';\r\n\r\nasync function fetchData() {\r\n    try {\r\n      const response = await fetch(filePath);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      throw new Error('There has been a problem with your fetch operation:', error);\r\n    }\r\n}\r\n\r\nasync function renderChart() {\r\n    try {\r\n      const jsonData = await fetchData();\r\n  \r\n      let {\r\n        usersColor,\r\n        salesColor,\r\n        months,\r\n        usersData,\r\n        salesData\r\n      } = jsonData;\r\n  \r\n      let siteStatisticChart = document.getElementById('site-statistic-сhart').getContext('2d');\r\n  \r\n      let myChart = new Chart(siteStatisticChart, {\r\n        type: 'line',\r\n        data: {\r\n          labels: months,\r\n          datasets: [{\r\n              label: 'Sale',\r\n              data: salesData,\r\n              fill: true,\r\n              backgroundColor: salesColor,\r\n              borderColor: salesColor,\r\n              borderWidth: 1,\r\n              tension: 0.3,\r\n              pointRadius: 0\r\n            },\r\n            {\r\n              label: 'Users',\r\n              data: usersData,\r\n              fill: true,\r\n              backgroundColor: usersColor,\r\n              borderColor: usersColor,\r\n              borderWidth: 1,\r\n              tension: 0.3,\r\n              pointRadius: 0\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              min: 0,\r\n              max: 800,\r\n              ticks: {\r\n                stepSize: 100\r\n              },\r\n              beginAtZero: true\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n              align: 'right',\r\n              labels: {\r\n                boxWidth: 12,\r\n                padding: 6\r\n              }\r\n            }\r\n          },\r\n          layout: {\r\n            padding: {\r\n              top: 10,\r\n              right: 20,\r\n              bottom: 10,\r\n              left: 10\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n}\r\n\r\nrenderChart();\r\n\r\n// Yearly Sales chart section\r\n\r\nlet yearsData = ['2014', '2015', '2016', '2017', '2018', '2019', '2020'];\r\nlet yearSalesData = [20, 50, 30, 40, 45, 35, 50];\r\n\r\nlet yearSalesDiv = document.getElementById('yearly-sales-chart').getContext('2d');\r\n\r\nvar yearSalesChart = new Chart(yearSalesDiv, {\r\n    type: 'line',\r\n    data: {\r\n        labels: yearsData,\r\n        datasets: [{\r\n            label: 'Yearly Sales',\r\n            data: yearSalesData,\r\n            fill: false,\r\n            backgroundColor: 'rgba(255, 255, 255, 1)',\r\n            borderColor: 'rgba(255, 255, 255, 1)',\r\n            borderWidth: 2,\r\n            pointRadius: 5,\r\n            pointBackgroundColor: 'rgba(255, 255, 255, 1)',\r\n            pointBorderColor: 'rgba(255, 255, 255, 1)',\r\n            pointBorderWidth: 2\r\n        }]\r\n    },\r\n    options: {\r\n        scales: {\r\n            x: {\r\n                grid: {\r\n                    color: 'rgba(0, 0, 0, 0)',\r\n                    drawBorder: false,\r\n                    drawOnChartArea: true\r\n                },\r\n                ticks: {\r\n                    color: 'rgba(255, 255, 255, 1)'\r\n                }\r\n            },\r\n            y: {\r\n                min: 0,\r\n                max: 60,\r\n                ticks: {\r\n                    color: 'rgba(255, 255, 255, 1)',\r\n                    stepSize: 10\r\n                },\r\n                grid: {\r\n                    color: 'rgba(0, 0, 0, 1)'\r\n                },\r\n                beginAtZero: true\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                labels: {\r\n                    color: 'rgba(255, 255, 255, 1)'\r\n                },\r\n                display: false\r\n            }\r\n        },\r\n\r\n    }\r\n});\r\n// Site Calendar section\r\nlet nowDate = new Date(),\r\n    nowDateNumber = nowDate.getDate(),\r\n    nowMonth = nowDate.getMonth(),\r\n    nowYear = nowDate.getFullYear(),\r\n    container = document.getElementsByClassName('month-calendar')[0],\r\n    monthContainer = container.getElementsByClassName('month-name')[0],\r\n    yearContainer = container.getElementsByClassName('year-name')[0],\r\n    daysContainer = container.getElementsByClassName('days')[0],\r\n    prev = container.getElementsByClassName('prev')[0],\r\n    next = container.getElementsByClassName('next')[0],\r\n    monthName = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\nlet days;\r\n\r\n\r\nlet curDate = nowDate.setMonth(nowDate.getMonth() - 1);\r\n\r\nfunction setMonthCalendar(year, month) {\r\n    let monthDays = new Date(year, month + 1, 0).getDate(),\r\n        monthPrefix = new Date(year, month, 1).getDay(),\r\n        monthDaysText = '';\r\n\r\n    monthContainer.textContent = monthName[month];\r\n    yearContainer.textContent = year;\r\n    daysContainer.innerHTML = '';\r\n\r\n    if (monthPrefix > 0) {\r\n        for (let i = 1; i <= monthPrefix; i++) {\r\n            monthDaysText += '<li></li>';\r\n        }\r\n    }\r\n\r\n    for (let i = 1; i <= monthDays; i++) {\r\n        monthDaysText += '<li>' + i + '</li>';\r\n    }\r\n\r\n    daysContainer.innerHTML = monthDaysText;\r\n\r\n    if (month == nowMonth && year == nowYear) {\r\n        days = daysContainer.getElementsByTagName('li');\r\n        days[monthPrefix + nowDateNumber - 1].classList.add('date-now');\r\n    }\r\n}\r\n\r\nsetMonthCalendar(nowYear, nowMonth);\r\n\r\nprev.onclick = function () {\r\n    let curDate = new Date(yearContainer.textContent, monthName.indexOf(monthContainer.textContent));\r\n\r\n    curDate.setMonth(curDate.getMonth() - 1);\r\n\r\n    let curYear = curDate.getFullYear(),\r\n        curMonth = curDate.getMonth();\r\n\r\n    setMonthCalendar(curYear, curMonth);\r\n}\r\n\r\nnext.onclick = function () {\r\n    let curDate = new Date(yearContainer.textContent, monthName.indexOf(monthContainer.textContent));\r\n\r\n    curDate.setMonth(curDate.getMonth() + 1);\r\n\r\n    let curYear = curDate.getFullYear(),\r\n        curMonth = curDate.getMonth();\r\n\r\n    setMonthCalendar(curYear, curMonth);\r\n}\r\n//Collapse nav\r\nconst collapseButton = document.getElementById('collapse');\r\nconst siteStatisticChartCollapsed = document.getElementById('site-statistic-сhart');\r\nconst containerMain = document.querySelector('.container');\r\nconst sectionMain = document.querySelector('.sectionMain');\r\nconst sidebar = document.getElementById('sidebar');\r\n\r\ncollapseButton.addEventListener('click', function () {\r\n    sidebar.classList.toggle('collapsed');\r\n    containerMain.classList.toggle('collapsed');\r\n    sectionMain.classList.toggle('collapsed');\r\n    myChart.resize(620, 310);\r\n    yearSalesChart.resize(290, 120);\r\n    dataGraphChart.resize(240,50);\r\n    if (sidebar.classList.contains('collapsed')) {\r\n        yearSalesChart.options.layout.padding.bottom = 10;\r\n        myChart.options.layout.padding.bottom = 10;\r\n    }\r\n    else{\r\n        yearSalesChart.options.layout.padding.bottom = 0;\r\n        myChart.options.layout.padding.bottom = 0;\r\n\r\n    }\r\n});\r\n\r\n\r\n// ---------Data graph chart-----------\r\n\r\n\r\nasync function renderDataGraphChart() {\r\n    try {\r\n      const jsonData = await fetchData();\r\n  \r\n      let {\r\n        dataGraphX,\r\n        dataGraphY,\r\n      } = jsonData;\r\n  \r\n      let dataGraphChartId = document.getElementById('data-graph-chart').getContext('2d');\r\n  \r\n      let dataGraphChart = new Chart(dataGraphChartId, {\r\n        type: 'line',\r\n        data: {\r\n          labels: dataGraphX,\r\n          datasets: [{\r\n              data: dataGraphY,\r\n              fill: false,\r\n              borderColor: 'white',\r\n              borderWidth: 2,\r\n              pointBackgroundColor: 'white',\r\n              pointBorderColor: 'white',\r\n              pointRadius: 5,\r\n              pointHoverRadius: 5,\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          scales: {\r\n            x: {\r\n              display: false\r\n            },\r\n            y: {\r\n              display: false\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n}\r\n\r\nrenderDataGraphChart();\r\n\r\n//--------data-graph-bar-chart section------------\r\n\r\nasync function renderDataBarChart() {\r\n    try {\r\n      const jsonData = await fetchData();\r\n  \r\n      let {\r\n        dataBarX,\r\n        dataBarY,\r\n      } = jsonData;\r\n  \r\n    const graphBarId = document.getElementById('data-graph-bar-chart').getContext('2d');\r\n    const graphBarChart = new Chart(graphBarId, {\r\n    type: 'bar',\r\n    data: {\r\n        labels: dataBarX,\r\n        datasets: [{\r\n            data: dataBarY,\r\n            backgroundColor: 'rgba(153, 114, 181, 1)',\r\n            borderColor: 'rgba(153, 114, 181, 1)',\r\n            borderWidth: 1\r\n        }]\r\n    },\r\n    options: {\r\n        scales: {\r\n            x: {\r\n                display: false,\r\n            },\r\n            y: {\r\n                beginAtZero: true,\r\n                display: false\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                display: false\r\n            }\r\n        }\r\n    }\r\n});\r\n} catch (error) {\r\n      console.error(error);\r\n}\r\n}\r\n\r\nrenderDataBarChart();\n\n//# sourceURL=webpack://pm_23_23/./app/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;